{"version":3,"file":"ej2-file-utils.umd.min.js","sources":["../src/save.js","../src/xml-writer.js","../src/encoding.js","../src/stream-writer.js"],"sourcesContent":["/**\n * Save class provide method to save file\n * ```typescript\n * let blob : Blob = new Blob([''], { type: 'text/plain' });\n * Save.save('fileName.txt',blob);\n */\nvar Save = /** @class */ (function () {\n    /**\n     * Initialize new instance of {save}\n     */\n    function Save() {\n        // tslint:disable\n    }\n    /**\n     * Saves the file with specified name and sends the file to client browser\n     * @param  {string} fileName- file name to save.\n     * @param  {Blob} buffer- the content to write in file\n     * @param  {boolean} isMicrosoftBrowser- specify whether microsoft browser or not\n     * @returns {void}\n     */\n    Save.save = function (fileName, buffer) {\n        if (fileName === null || fileName === undefined || fileName === '') {\n            throw new Error('ArgumentException: fileName cannot be undefined, null or empty');\n        }\n        var extension = fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length);\n        var mimeType = this.getMimeType(extension);\n        if (mimeType !== '') {\n            buffer = new Blob([buffer], { type: mimeType });\n        }\n        if (this.isMicrosoftBrowser) {\n            navigator.msSaveBlob(buffer, fileName);\n        }\n        else {\n            var downloadLink = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');\n            this.saveInternal(fileName, extension, buffer, downloadLink, 'download' in downloadLink);\n        }\n    };\n    Save.saveInternal = function (fileName, extension, buffer, downloadLink, hasDownloadAttribute) {\n        if (hasDownloadAttribute) {\n            downloadLink.download = fileName;\n            var dataUrl_1 = window.URL.createObjectURL(buffer);\n            downloadLink.href = dataUrl_1;\n            var event_1 = document.createEvent('MouseEvent');\n            event_1.initEvent('click', true, true);\n            downloadLink.dispatchEvent(event_1);\n            setTimeout(function () {\n                window.URL.revokeObjectURL(dataUrl_1);\n                dataUrl_1 = undefined;\n            });\n        }\n        else {\n            if (extension !== 'docx' && extension !== 'xlsx') {\n                var url = window.URL.createObjectURL(buffer);\n                var isPopupBlocked = window.open(url, '_blank');\n                if (!isPopupBlocked) {\n                    window.location.href = url;\n                }\n            }\n            else {\n                var reader_1 = new FileReader();\n                reader_1.onloadend = function () {\n                    var isPopupBlocked = window.open(reader_1.result, '_blank');\n                    if (!isPopupBlocked) {\n                        window.location.href = reader_1.result;\n                    }\n                };\n                reader_1.readAsDataURL(buffer);\n            }\n        }\n    };\n    /**\n     *\n     * @param {string} extension - get mime type of the specified extension\n     * @private\n     */\n    Save.getMimeType = function (extension) {\n        var mimeType = '';\n        switch (extension) {\n            case 'html':\n                mimeType = 'text/html';\n                break;\n            case 'pdf':\n                mimeType = 'application/pdf';\n                break;\n            case 'docx':\n                mimeType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';\n                break;\n            case 'xlsx':\n                mimeType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n                break;\n            case 'txt':\n                mimeType = 'text/plain';\n                break;\n        }\n        return mimeType;\n    };\n    return Save;\n}());\nexport { Save };\n","import { Save } from './save';\n/**\n * XmlWriter class provide method to create XML data\n */\nvar XmlWriter = /** @class */ (function () {\n    /**\n     * Initialize new instance of {XmlWriter}\n     */\n    function XmlWriter() {\n        this.contentPos = 0;\n        this.bufferText = '';\n        this.bufferBlob = new Blob([''], { type: 'text/plain' });\n        this.currentState = 'Initial';\n        this.namespaceStack = [];\n        this.namespaceStack.push(new Namespace());\n        this.namespaceStack[0].set('xmlns', 'http://www.w3.org/2000/xmlns/', 'Special');\n        this.namespaceStack.push(new Namespace());\n        this.namespaceStack[1].set('xml', 'http://www.w3.org/XML/1998/namespace', 'Special');\n        this.namespaceStack.push(new Namespace());\n        this.namespaceStack[2].set('', '', 'Implied');\n        this.elementStack = [];\n        this.elementStack.push(new XmlElement());\n        this.elementStack[0].set('', '', '', this.namespaceStack.length - 1);\n        this.attributeStack = [];\n        Save.isMicrosoftBrowser = !(!navigator.msSaveBlob);\n    }\n    Object.defineProperty(XmlWriter.prototype, \"buffer\", {\n        /**\n         * Gets the content written to the {XmlWriter} as Blob.\n         * @returns {Blob}\n         */\n        get: function () {\n            this.flush();\n            return this.bufferBlob;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Writes processing instruction with a space between the name and text\n     * @param {string} name - name of the processing instruction\n     * @param {string} text - text to write in the processing instruction\n     * @throws ArgumentException\n     * @throws InvalidArgumentException\n     * @throws InvalidOperationException\n     */\n    XmlWriter.prototype.writeProcessingInstruction = function (name, text) {\n        if (name === undefined || name === null || name.length === 0) {\n            throw new Error('ArgumentException: name should not be undefined, null or empty');\n        }\n        this.checkName(name);\n        if (text === undefined || text === null) {\n            text = '';\n        }\n        if (name.length === 3 && name === 'xml') {\n            if (this.currentState !== 'Initial') {\n                // tslint:disable-next-line:max-line-length\n                throw new Error('InvalidArgumentException: Cannot write XML declaration.WriteStartDocument method has already written it');\n            }\n        }\n        if (this.currentState !== 'Initial' || this.bufferBlob === undefined) {\n            throw new Error('InvalidOperationException: Wrong Token');\n        }\n        else {\n            this.writeStartDocument();\n            this.writeProcessingInstructionInternal(name, text);\n        }\n    };\n    /**\n     * Writes Xml declaration with version and standalone attribute\n     * @param {boolean} standalone - if true it write standalone=yes else standalone=no\n     * @throws InvalidOperation\n     */\n    XmlWriter.prototype.writeStartDocument = function (standalone) {\n        if (this.currentState !== 'Initial' || this.bufferBlob === undefined) {\n            throw new Error('InvalidOperationException: Wrong Token');\n        }\n        this.currentState = 'StartDocument';\n        this.rawText('<?xml version=\"1.0\" encoding=\"utf-8');\n        if (standalone !== null && standalone !== undefined) {\n            this.rawText('\" standalone=\"');\n            this.rawText(standalone ? 'yes' : 'no');\n        }\n        this.rawText('\"?>');\n    };\n    /**\n     * Closes any open tag or attribute and write the state back to start\n     */\n    XmlWriter.prototype.writeEndDocument = function () {\n        while (this.elementStack.length - 1 > 0) {\n            this.writeEndElement();\n        }\n        this.currentState = 'EndDocument';\n        this.flush();\n    };\n    /**\n     * Writes the specified start tag and associates it with the given namespace and prefix.\n     * @param {string} prefix - namespace prefix of element\n     * @param {string} localName -localName of element\n     * @param {string} namespace - namespace URI associate with element\n     * @throws ArgumentException\n     * @throws InvalidOperationException\n     */\n    XmlWriter.prototype.writeStartElement = function (prefix, localName, namespace) {\n        if (this.bufferBlob === undefined) {\n            throw new Error('InvalidOperationException: Wrong Token');\n        }\n        if (localName === undefined || localName === null || localName.length === 0) {\n            throw new Error('ArgumentException: localName cannot be undefined, null or empty');\n        }\n        this.checkName(localName);\n        if (this.currentState === 'Initial') {\n            this.writeStartDocument();\n        }\n        if (this.currentState === 'StartElement') {\n            this.startElementContent();\n        }\n        this.currentState = 'StartElement';\n        if (prefix === undefined || prefix === null) {\n            if (namespace !== undefined && namespace !== null) {\n                prefix = this.lookupPrefix(namespace);\n            }\n            if (prefix === undefined || prefix === null) {\n                prefix = '';\n            }\n        }\n        else if (prefix.length > 0) {\n            if (namespace === undefined || namespace === null) {\n                namespace = this.lookupNamespace(prefix);\n            }\n            if (namespace === undefined || namespace === null || (namespace !== undefined && namespace.length === 0)) {\n                throw new Error('ArgumentException: Cannot use a prefix with an empty namespace');\n            }\n        }\n        if (namespace === undefined || namespace === null) {\n            namespace = this.lookupNamespace(prefix);\n        }\n        this.writeStartElementInternal(prefix, localName, namespace);\n    };\n    /**\n     * Closes one element and pop corresponding namespace scope\n     */\n    XmlWriter.prototype.writeEndElement = function () {\n        if (this.currentState === 'StartElement') {\n            this.startElementContent();\n            this.currentState = 'ElementContent';\n        }\n        else if (this.currentState === 'ElementContent') {\n            this.currentState = 'ElementContent';\n        }\n        this.currentState = 'EndElement';\n        var top = this.elementStack.length - 1;\n        this.writeEndElementInternal(this.elementStack[top].prefix, this.elementStack[top].localName);\n        this.namespaceStack.splice(this.elementStack[top].previousTop + 1);\n        this.elementStack.splice(top);\n        if (this.bufferText.length > 10240) {\n            this.flush();\n        }\n    };\n    /**\n     * Writes an element with the specified prefix, local name, namespace URI, and value.\n     * @param {string} prefix - namespace prefix of element\n     * @param {string} localName - localName of element\n     * @param {string} namespace - namespace URI associate with element\n     * @param {string} value - value of element\n     */\n    XmlWriter.prototype.writeElementString = function (prefix, localName, namespace, value) {\n        this.writeStartElement(prefix, localName, namespace);\n        if (value !== undefined && value !== null && value.length !== 0) {\n            this.writeString(value);\n        }\n        this.writeEndElement();\n    };\n    /**\n     * Writes out the attribute with the specified prefix, local name, namespace URI, and value\n     * @param {string} prefix - namespace prefix of element\n     * @param {string} localName - localName of element\n     * @param {string} namespace - namespace URI associate with element\n     * @param {string} value - value of element\n     */\n    XmlWriter.prototype.writeAttributeString = function (prefix, localName, namespace, value) {\n        this.writeStartAttribute(prefix, localName, namespace, value);\n        this.writeStringInternal(value, true);\n        this.writeEndAttribute();\n    };\n    /**\n     * Writes the given text content\n     * @param {string} text - text to write\n     * @throws InvalidOperationException\n     */\n    XmlWriter.prototype.writeString = function (text) {\n        this.writeInternal(text, false);\n    };\n    /**\n     * Write given text as raw data\n     * @param {string} text - text to write\n     * @throws InvalidOperationException\n     */\n    XmlWriter.prototype.writeRaw = function (text) {\n        this.writeInternal(text, true);\n    };\n    XmlWriter.prototype.writeInternal = function (text, isRawString) {\n        if (text === undefined || text === null) {\n            return;\n        }\n        else {\n            if (this.currentState !== 'StartElement' && this.currentState !== 'ElementContent') {\n                throw new Error('InvalidOperationException: Wrong Token');\n            }\n            if (this.currentState === 'StartElement') {\n                this.startElementContent();\n            }\n            this.currentState = 'ElementContent';\n            if (isRawString) {\n                this.rawText(text);\n            }\n            else {\n                this.writeStringInternal(text, false);\n            }\n        }\n    };\n    /**\n     * Saves the file with specified name and sends the file to client browser\n     * @param {string} fileName - file name\n     */\n    XmlWriter.prototype.save = function (fileName) {\n        while (this.elementStack.length - 1 > 0) {\n            this.writeEndElement();\n        }\n        if (this.bufferText !== '') {\n            this.flush();\n        }\n        Save.save(fileName, this.buffer);\n    };\n    /**\n     * Releases the resources used by XmlWriter.\n     */\n    XmlWriter.prototype.destroy = function () {\n        this.bufferBlob = undefined;\n        for (var i = 0; i < this.namespaceStack.length; i++) {\n            this.namespaceStack[i].destroy();\n        }\n        this.namespaceStack = [];\n        for (var i = 0; i < this.elementStack.length; i++) {\n            this.elementStack[i].destroy();\n        }\n        this.elementStack = [];\n        this.bufferText = '';\n        this.contentPos = 0;\n    };\n    XmlWriter.prototype.flush = function () {\n        if (this.bufferBlob === undefined) {\n            return;\n        }\n        this.bufferBlob = new Blob([this.bufferBlob, this.bufferText], { type: 'text/plain' });\n        this.bufferText = '';\n    };\n    XmlWriter.prototype.writeProcessingInstructionInternal = function (name, text) {\n        this.bufferText += '<?';\n        this.rawText(name);\n        if (text.length > 0) {\n            this.bufferText += ' ';\n            text = text.replace(/\\?\\>/g, '? >');\n            this.bufferText += text;\n        }\n        this.bufferText += '?';\n        this.bufferText += '>';\n    };\n    XmlWriter.prototype.writeStartAttribute = function (prefix, localName, namespace, value) {\n        if (localName === undefined || localName === null || localName.length === 0) {\n            if (prefix === 'xmlns') {\n                localName = 'xmlns';\n                prefix = '';\n            }\n            else {\n                throw new Error('ArgumentException: localName cannot be undefined, null or empty');\n            }\n        }\n        if (this.currentState !== 'StartElement') {\n            throw new Error('InvalidOperationException: Wrong Token');\n        }\n        this.checkName(localName);\n        this.writeStartAttributePrefixAndNameSpace(prefix, localName, namespace, value);\n    };\n    XmlWriter.prototype.writeStartAttributePrefixAndNameSpace = function (prefix, localName, namespace, value) {\n        if (prefix === undefined || prefix === null) {\n            if (namespace !== undefined && namespace !== null) {\n                if (!(localName === 'xmlns' && namespace === 'http://www.w3.org/2000/xmlns/')) {\n                    prefix = this.lookupPrefix(namespace);\n                }\n            }\n            if (prefix === undefined || prefix === null) {\n                prefix = '';\n            }\n        }\n        if (namespace === undefined || namespace === null) {\n            if (prefix !== undefined && prefix !== null && prefix.length > 0) {\n                namespace = this.lookupNamespace(prefix);\n            }\n            if (namespace === undefined || namespace === null) {\n                namespace = '';\n            }\n        }\n        this.writeStartAttributeSpecialAttribute(prefix, localName, namespace, value);\n    };\n    XmlWriter.prototype.writeStartAttributeSpecialAttribute = function (prefix, localName, namespace, value) {\n        if (prefix.length === 0) {\n            if (localName[0] === 'x' && localName === 'xmlns') {\n                this.skipPushAndWrite(prefix, localName, namespace);\n                this.pushNamespaceExplicit('', value);\n                return;\n            }\n            else if (namespace.length > 0) {\n                prefix = this.lookupPrefix(namespace);\n            }\n        }\n        else {\n            if (prefix[0] === 'x') {\n                if (prefix === 'xmlns') {\n                    this.skipPushAndWrite(prefix, localName, namespace);\n                    this.pushNamespaceExplicit(localName, value);\n                    return;\n                }\n                else if (prefix === 'xml') {\n                    if (localName === 'space' || localName === 'lang') {\n                        this.skipPushAndWrite(prefix, localName, namespace);\n                        return;\n                    }\n                }\n            }\n            if (namespace.length === 0) {\n                prefix = '';\n            }\n        }\n        if (prefix !== undefined && prefix !== null && prefix.length !== 0) {\n            this.pushNamespaceImplicit(prefix, namespace);\n        }\n        this.skipPushAndWrite(prefix, localName, namespace);\n    };\n    XmlWriter.prototype.writeEndAttribute = function () {\n        this.currentState = 'StartElement';\n        this.bufferText += '\"';\n    };\n    XmlWriter.prototype.writeStartElementInternal = function (prefix, localName, namespace) {\n        this.bufferText += '<';\n        if (prefix.length > 0) {\n            this.rawText(prefix);\n            this.bufferText += ':';\n        }\n        this.rawText(localName);\n        var top = this.elementStack.length;\n        this.elementStack.push(new XmlElement());\n        this.elementStack[top].set(prefix, localName, namespace, this.namespaceStack.length - 1);\n        this.pushNamespaceImplicit(prefix, namespace);\n        for (var i = 0; i < this.attributeStack.length; i++) {\n            this.attributeStack[i].destroy();\n        }\n        this.attributeStack = [];\n    };\n    XmlWriter.prototype.writeEndElementInternal = function (prefix, localName) {\n        if (this.contentPos !== this.bufferText.length + 1) {\n            this.bufferText += '</';\n            if (prefix !== undefined && prefix !== null && prefix.length !== 0) {\n                this.rawText(prefix);\n                this.bufferText += ':';\n            }\n            this.rawText(localName);\n            this.bufferText += '>';\n        }\n        else {\n            this.bufferText = this.bufferText.substring(0, this.bufferText.length - 1);\n            this.bufferText += ' />';\n        }\n    };\n    XmlWriter.prototype.writeStartAttributeInternal = function (prefix, localName, namespaceName) {\n        this.bufferText += ' ';\n        if (prefix !== undefined && prefix !== null && prefix.length > 0) {\n            this.rawText(prefix);\n            this.bufferText += ':';\n        }\n        this.rawText(localName);\n        this.bufferText += '=';\n        this.bufferText += '\"';\n    };\n    XmlWriter.prototype.writeNamespaceDeclaration = function (prefix, namespaceUri) {\n        this.writeStartNamespaceDeclaration(prefix);\n        this.writeStringInternal(namespaceUri, true);\n        this.bufferText += '\"';\n    };\n    XmlWriter.prototype.writeStartNamespaceDeclaration = function (prefix) {\n        if (prefix === undefined || prefix === null || prefix.length === 0) {\n            this.rawText(' xmlns=\\\"');\n        }\n        else {\n            this.rawText(' xmlns:');\n            this.rawText(prefix);\n            this.bufferText += '=';\n            this.bufferText += '\"';\n        }\n    };\n    XmlWriter.prototype.writeStringInternal = function (text, inAttributeValue) {\n        if (text === null || text === undefined) {\n            text = '';\n        }\n        var tempText = '';\n        text = text.replace(/\\&/g, '&amp;');\n        text = text.replace(/\\</g, '&lt;');\n        text = text.replace(/\\>/g, '&gt;');\n        if (inAttributeValue) {\n            text = text.replace(/\\\"/g, '&quot;');\n        }\n        this.bufferText += text;\n        if (!inAttributeValue) {\n            this.contentPos = 0;\n        }\n    };\n    XmlWriter.prototype.startElementContent = function () {\n        var start = this.elementStack[this.elementStack.length - 1].previousTop;\n        for (var i = this.namespaceStack.length - 1; i > start; i--) {\n            if (this.namespaceStack[i].kind === 'NeedToWrite') {\n                this.writeNamespaceDeclaration(this.namespaceStack[i].prefix, this.namespaceStack[i].namespaceUri);\n            }\n        }\n        this.bufferText += '>';\n        this.contentPos = this.bufferText.length + 1;\n    };\n    XmlWriter.prototype.rawText = function (text) {\n        this.bufferText += text;\n    };\n    XmlWriter.prototype.addNamespace = function (prefix, ns, kind) {\n        var top = this.namespaceStack.length;\n        this.namespaceStack.push(new Namespace());\n        this.namespaceStack[top].set(prefix, ns, kind);\n    };\n    XmlWriter.prototype.lookupPrefix = function (namespace) {\n        for (var i = this.namespaceStack.length - 1; i >= 0; i--) {\n            if (this.namespaceStack[i].namespaceUri === namespace) {\n                return this.namespaceStack[i].prefix;\n            }\n        }\n        return undefined;\n    };\n    XmlWriter.prototype.lookupNamespace = function (prefix) {\n        for (var i = this.namespaceStack.length - 1; i >= 0; i--) {\n            if (this.namespaceStack[i].prefix === prefix) {\n                return this.namespaceStack[i].namespaceUri;\n            }\n        }\n        return undefined;\n    };\n    XmlWriter.prototype.lookupNamespaceIndex = function (prefix) {\n        for (var i = this.namespaceStack.length - 1; i >= 0; i--) {\n            if (this.namespaceStack[i].prefix === prefix) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    XmlWriter.prototype.pushNamespaceImplicit = function (prefix, ns) {\n        var kind;\n        var existingNsIndex = this.lookupNamespaceIndex(prefix);\n        if (existingNsIndex !== -1) {\n            if (existingNsIndex > this.elementStack[this.elementStack.length - 1].previousTop) {\n                if (this.namespaceStack[existingNsIndex].namespaceUri !== ns) {\n                    throw new Error('XmlException namespace Uri needs to be the same as the one that is already declared');\n                }\n                return;\n            }\n            else {\n                if (this.namespaceStack[existingNsIndex].kind === 'Special') {\n                    if (prefix === 'xml') {\n                        if (ns !== this.namespaceStack[existingNsIndex].namespaceUri) {\n                            throw new Error('InvalidArgumentException: Xml String');\n                        }\n                        else {\n                            kind = 'Implied';\n                        }\n                    }\n                    else {\n                        throw new Error('InvalidArgumentException: Prefix \"xmlns\" is reserved for use by XML.');\n                    }\n                }\n                else {\n                    kind = (this.namespaceStack[existingNsIndex].namespaceUri === ns) ? 'Implied' : 'NeedToWrite';\n                }\n            }\n        }\n        else {\n            if ((ns === 'http://www.w3.org/XML/1998/namespace' && prefix !== 'xml') ||\n                (ns === 'http://www.w3.org/2000/xmlns/' && prefix !== 'xmlns')) {\n                throw new Error('InvalidArgumentException');\n            }\n            kind = 'NeedToWrite';\n        }\n        this.addNamespace(prefix, ns, kind);\n    };\n    XmlWriter.prototype.pushNamespaceExplicit = function (prefix, ns) {\n        var existingNsIndex = this.lookupNamespaceIndex(prefix);\n        if (existingNsIndex !== -1) {\n            if (existingNsIndex > this.elementStack[this.elementStack.length - 1].previousTop) {\n                this.namespaceStack[existingNsIndex].kind = 'Written';\n                return;\n            }\n        }\n        this.addNamespace(prefix, ns, 'Written');\n        return;\n    };\n    XmlWriter.prototype.addAttribute = function (prefix, localName, namespaceName) {\n        var top = this.attributeStack.length;\n        this.attributeStack.push(new XmlAttribute());\n        this.attributeStack[top].set(prefix, localName, namespaceName);\n        for (var i = 0; i < top; i++) {\n            if (this.attributeStack[i].isDuplicate(prefix, localName, namespaceName)) {\n                throw new Error('XmlException: duplicate attribute name');\n            }\n        }\n    };\n    XmlWriter.prototype.skipPushAndWrite = function (prefix, localName, namespace) {\n        this.addAttribute(prefix, localName, namespace);\n        this.writeStartAttributeInternal(prefix, localName, namespace);\n    };\n    XmlWriter.prototype.checkName = function (text) {\n        var format = /[ !@#$%^&*()+\\=\\[\\]{};':\"\\\\|,<>\\/?]/;\n        if (format.test(text)) {\n            throw new Error('InvalidArgumentException: invalid name character');\n        }\n    };\n    return XmlWriter;\n}());\nexport { XmlWriter };\n/**\n * class for managing namespace collection\n */\nvar Namespace = /** @class */ (function () {\n    function Namespace() {\n    }\n    /**\n     * set value for current namespace instance\n     * @param {string} prefix namespace's prefix\n     * @param {string} namespaceUri namespace URI\n     * @param {string} kind namespace kind\n     */\n    Namespace.prototype.set = function (prefix, namespaceUri, kind) {\n        this.prefix = prefix;\n        this.namespaceUri = namespaceUri;\n        this.kind = kind;\n    };\n    /**\n     * Releases the resources used by Namespace\n     */\n    Namespace.prototype.destroy = function () {\n        this.prefix = undefined;\n        this.namespaceUri = undefined;\n        this.kind = undefined;\n    };\n    return Namespace;\n}());\nexport { Namespace };\n/**\n * class for managing element collection\n */\nvar XmlElement = /** @class */ (function () {\n    function XmlElement() {\n    }\n    /**\n     * set value of current element\n     * @param {string} prefix - element prefix\n     * @param {string} localName - element local name\n     * @param {string} namespaceUri -namespace URI\n     * @param {string} previousTop - previous namespace top\n     */\n    XmlElement.prototype.set = function (prefix, localName, namespaceUri, previousTop) {\n        this.previousTop = previousTop;\n        this.prefix = prefix;\n        this.namespaceUri = namespaceUri;\n        this.localName = localName;\n    };\n    /**\n     * Releases the resources used by XmlElement\n     */\n    XmlElement.prototype.destroy = function () {\n        this.previousTop = undefined;\n        this.prefix = undefined;\n        this.localName = undefined;\n        this.namespaceUri = undefined;\n    };\n    return XmlElement;\n}());\nexport { XmlElement };\n/**\n * class for managing attribute collection\n */\nvar XmlAttribute = /** @class */ (function () {\n    function XmlAttribute() {\n    }\n    /**\n     * set value of current attribute\n     * @param {string} prefix - namespace's prefix\n     * @param {string} namespaceUri - namespace URI\n     * @param {string} localName - attribute localName\n     */\n    XmlAttribute.prototype.set = function (prefix, localName, namespaceUri) {\n        this.prefix = prefix;\n        this.namespaceUri = namespaceUri;\n        this.localName = localName;\n    };\n    /**\n     * get whether the attribute is duplicate or not\n     * @param {string} prefix - namespace's prefix\n     * @param {string} namespaceUri - namespace URI\n     * @param {string} localName - attribute localName\n     */\n    XmlAttribute.prototype.isDuplicate = function (prefix, localName, namespaceUri) {\n        return ((this.localName === localName) && ((this.prefix === prefix) || (this.namespaceUri === namespaceUri)));\n    };\n    /**\n     * Releases the resources used by XmlAttribute\n     */\n    XmlAttribute.prototype.destroy = function () {\n        this.prefix = undefined;\n        this.namespaceUri = undefined;\n        this.localName = undefined;\n    };\n    return XmlAttribute;\n}());\nexport { XmlAttribute };\n","/**\n * Encoding class: Contains the details about encoding type, whether to write a Unicode byte order mark (BOM).\n * ```typescript\n * let encoding : Encoding = new Encoding();\n * encoding.type = 'Utf8';\n * encoding.getBytes('Encoding', 0, 5);\n * ```\n */\nvar Encoding = /** @class */ (function () {\n    /**\n     * Initializes a new instance of the Encoding class. A parameter specifies whether to write a Unicode byte order mark\n     * @param  {boolean} includeBom?-true to specify that a Unicode byte order mark is written; otherwise, false.\n     */\n    function Encoding(includeBom) {\n        this.emitBOM = true;\n        this.encodingType = 'Ansi';\n        this.initBOM(includeBom);\n    }\n    Object.defineProperty(Encoding.prototype, \"includeBom\", {\n        /**\n         * Gets a value indicating whether to write a Unicode byte order mark\n         * @returns boolean- true to specify that a Unicode byte order mark is written; otherwise, false\n         */\n        get: function () {\n            return this.emitBOM;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Encoding.prototype, \"type\", {\n        /**\n         * Gets the encoding type.\n         * @returns EncodingType\n         */\n        get: function () {\n            return this.encodingType;\n        },\n        /**\n         * Sets the encoding type.\n         * @param  {EncodingType} value\n         */\n        set: function (value) {\n            this.encodingType = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Initialize the includeBom to emit BOM or Not\n     * @param  {boolean} includeBom\n     */\n    Encoding.prototype.initBOM = function (includeBom) {\n        if (includeBom === undefined || includeBom === null) {\n            this.emitBOM = true;\n        }\n        else {\n            this.emitBOM = includeBom;\n        }\n    };\n    /**\n     * Calculates the number of bytes produced by encoding the characters in the specified string\n     * @param  {string} chars - The string containing the set of characters to encode\n     * @returns {number} - The number of bytes produced by encoding the specified characters\n     */\n    Encoding.prototype.getByteCount = function (chars) {\n        var byteCount = 0;\n        validateNullOrUndefined(chars, 'string');\n        if (chars === '') {\n            var byte = this.utf8Len(chars.charCodeAt(0));\n            return byte;\n        }\n        if (this.type === null || this.type === undefined) {\n            this.type = 'Ansi';\n        }\n        return this.getByteCountInternal(chars, 0, chars.length);\n    };\n    /**\n     * Return the Byte of character\n     * @param  {number} codePoint\n     * @returns {number}\n     */\n    Encoding.prototype.utf8Len = function (codePoint) {\n        var bytes = codePoint <= 0x7F ? 1 :\n            codePoint <= 0x7FF ? 2 :\n                codePoint <= 0xFFFF ? 3 :\n                    codePoint <= 0x1FFFFF ? 4 : 0;\n        return bytes;\n    };\n    /**\n     * for 4 byte character return surrogate pair true, otherwise false\n     * @param  {number} codeUnit\n     * @returns {boolean}\n     */\n    Encoding.prototype.isHighSurrogate = function (codeUnit) {\n        return codeUnit >= 0xD800 && codeUnit <= 0xDBFF;\n    };\n    /**\n     * for 4byte character generate the surrogate pair\n     * @param  {number} highCodeUnit\n     * @param  {number} lowCodeUnit\n     */\n    Encoding.prototype.toCodepoint = function (highCodeUnit, lowCodeUnit) {\n        highCodeUnit = (0x3FF & highCodeUnit) << 10;\n        var u = highCodeUnit | (0x3FF & lowCodeUnit);\n        return u + 0x10000;\n    };\n    /**\n     * private method to get the byte count for specific charindex and count\n     * @param  {string} chars\n     * @param  {number} charIndex\n     * @param  {number} charCount\n     */\n    Encoding.prototype.getByteCountInternal = function (chars, charIndex, charCount) {\n        var byteCount = 0;\n        if (this.encodingType === 'Utf8' || this.encodingType === 'Unicode') {\n            var isUtf8 = this.encodingType === 'Utf8';\n            for (var i = 0; i < charCount; i++) {\n                var charCode = chars.charCodeAt(isUtf8 ? charIndex : charIndex++);\n                if (this.isHighSurrogate(charCode)) {\n                    if (isUtf8) {\n                        var high = charCode;\n                        var low = chars.charCodeAt(++charIndex);\n                        byteCount += this.utf8Len(this.toCodepoint(high, low));\n                    }\n                    else {\n                        byteCount += 4;\n                        ++i;\n                    }\n                }\n                else {\n                    if (isUtf8) {\n                        byteCount += this.utf8Len(charCode);\n                    }\n                    else {\n                        byteCount += 2;\n                    }\n                }\n                if (isUtf8) {\n                    charIndex++;\n                }\n            }\n            return byteCount;\n        }\n        else {\n            byteCount = charCount;\n            return byteCount;\n        }\n    };\n    /**\n     * Encodes a set of characters from the specified string into the ArrayBuffer.\n     * @param  {string} s- The string containing the set of characters to encode\n     * @param  {number} charIndex-The index of the first character to encode.\n     * @param  {number} charCount- The number of characters to encode.\n     * @returns {ArrayBuffer} - The ArrayBuffer that contains the resulting sequence of bytes.\n     */\n    Encoding.prototype.getBytes = function (s, charIndex, charCount) {\n        validateNullOrUndefined(s, 'string');\n        validateNullOrUndefined(charIndex, 'charIndex');\n        validateNullOrUndefined(charCount, 'charCount');\n        if (charIndex < 0 || charCount < 0) {\n            throw new RangeError('Argument Out Of Range Exception: charIndex or charCount is less than zero');\n        }\n        if (s.length - charIndex < charCount) {\n            throw new RangeError('Argument Out Of Range Exception: charIndex and charCount do not denote a valid range in string');\n        }\n        var bytes;\n        if (s === '') {\n            bytes = new ArrayBuffer(0);\n            return bytes;\n        }\n        if (this.type === null || this.type === undefined) {\n            this.type = 'Ansi';\n        }\n        var byteCount = this.getByteCountInternal(s, charIndex, charCount);\n        switch (this.type) {\n            case 'Utf8':\n                bytes = this.getBytesOfUtf8Encoding(byteCount, s, charIndex, charCount);\n                return bytes;\n            case 'Unicode':\n                bytes = this.getBytesOfUnicodeEncoding(byteCount, s, charIndex, charCount);\n                return bytes;\n            default:\n                bytes = this.getBytesOfAnsiEncoding(byteCount, s, charIndex, charCount);\n                return bytes;\n        }\n    };\n    /**\n     * Decodes a sequence of bytes from the specified ArrayBuffer into the string.\n     * @param  {ArrayBuffer} bytes- The ArrayBuffer containing the sequence of bytes to decode.\n     * @param  {number} index- The index of the first byte to decode.\n     * @param  {number} count- The number of bytes to decode.\n     * @returns {string} - The string that contains the resulting set of characters.\n     */\n    Encoding.prototype.getString = function (bytes, index, count) {\n        validateNullOrUndefined(bytes, 'bytes');\n        validateNullOrUndefined(index, 'index');\n        validateNullOrUndefined(count, 'count');\n        if (index < 0 || count < 0) {\n            throw new RangeError('Argument Out Of Range Exception: index or count is less than zero');\n        }\n        if (bytes.byteLength - index < count) {\n            throw new RangeError('Argument Out Of Range Exception: index and count do not denote a valid range in bytes');\n        }\n        if (bytes.byteLength === 0 || count === 0) {\n            return '';\n        }\n        if (this.type === null || this.type === undefined) {\n            this.type = 'Ansi';\n        }\n        var out = '';\n        var byteCal = new Uint8Array(bytes);\n        switch (this.type) {\n            case 'Utf8':\n                var s = this.getStringOfUtf8Encoding(byteCal, index, count);\n                return s;\n            case 'Unicode':\n                var byteUnicode = new Uint16Array(bytes);\n                out = this.getStringofUnicodeEncoding(byteUnicode, index, count);\n                return out;\n            default:\n                var j = index;\n                for (var i = 0; i < count; i++) {\n                    var c = byteCal[j];\n                    out += String.fromCharCode(c); // 1 byte(ASCII) character                  \n                    j++;\n                }\n                return out;\n        }\n    };\n    Encoding.prototype.getBytesOfAnsiEncoding = function (byteCount, s, charIndex, charCount) {\n        var bytes = new ArrayBuffer(byteCount);\n        var bufview = new Uint8Array(bytes);\n        var k = 0;\n        for (var i = 0; i < charCount; i++) {\n            var charcode = s.charCodeAt(charIndex++);\n            if (charcode < 0x800) {\n                bufview[k] = charcode;\n            }\n            else {\n                bufview[k] = 63; //replacement character '?'\n            }\n            k++;\n        }\n        return bytes;\n    };\n    Encoding.prototype.getBytesOfUtf8Encoding = function (byteCount, s, charIndex, charCount) {\n        var bytes = new ArrayBuffer(byteCount);\n        var uint = new Uint8Array(bytes);\n        var index = charIndex;\n        var j = 0;\n        for (var i = 0; i < charCount; i++) {\n            var charcode = s.charCodeAt(index);\n            if (charcode <= 0x7F) { // 1 byte character 2^7\n                uint[j] = charcode;\n            }\n            else if (charcode < 0x800) { // 2 byte character 2^11\n                uint[j] = 0xc0 | (charcode >> 6);\n                uint[++j] = 0x80 | (charcode & 0x3f);\n            }\n            else if ((charcode < 0xd800 || charcode >= 0xe000)) { // 3 byte character 2^16        \n                uint[j] = 0xe0 | (charcode >> 12);\n                uint[++j] = 0x80 | ((charcode >> 6) & 0x3f);\n                uint[++j] = 0x80 | (charcode & 0x3f);\n            }\n            else {\n                uint[j] = 0xef;\n                uint[++j] = 0xbf;\n                uint[++j] = 0xbd; // U+FFFE \"replacement character\"\n            }\n            ++j;\n            ++index;\n        }\n        return bytes;\n    };\n    Encoding.prototype.getBytesOfUnicodeEncoding = function (byteCount, s, charIndex, charCount) {\n        var bytes = new ArrayBuffer(byteCount);\n        var uint16 = new Uint16Array(bytes);\n        for (var i = 0; i < charCount; i++) {\n            var charcode = s.charCodeAt(i);\n            uint16[i] = charcode;\n        }\n        return bytes;\n    };\n    Encoding.prototype.getStringOfUtf8Encoding = function (byteCal, index, count) {\n        var j = 0;\n        var i = index;\n        var s = '';\n        for (j; j < count; j++) {\n            var c = byteCal[i++];\n            while (i > byteCal.length) {\n                return s;\n            }\n            if (c > 127) {\n                if (c > 191 && c < 224 && i < count) {\n                    c = (c & 31) << 6 | byteCal[i] & 63;\n                }\n                else if (c > 223 && c < 240 && i < byteCal.byteLength) {\n                    c = (c & 15) << 12 | (byteCal[i] & 63) << 6 | byteCal[++i] & 63;\n                }\n                else if (c > 239 && c < 248 && i < byteCal.byteLength) {\n                    c = (c & 7) << 18 | (byteCal[i] & 63) << 12 | (byteCal[++i] & 63) << 6 | byteCal[++i] & 63;\n                }\n                ++i;\n            }\n            s += String.fromCharCode(c); // 1 byte(ASCII) character                          \n        }\n        return s;\n    };\n    Encoding.prototype.getStringofUnicodeEncoding = function (byteUni, index, count) {\n        if (count > byteUni.length) {\n            throw new RangeError('ArgumentOutOfRange_Count');\n        }\n        var byte16 = new Uint16Array(count);\n        var out = '';\n        for (var i = 0; i < count && i < byteUni.length; i++) {\n            byte16[i] = byteUni[index++];\n        }\n        out = String.fromCharCode.apply(null, byte16);\n        return out;\n    };\n    /**\n     * To clear the encoding instance\n     * @return {void}\n     */\n    Encoding.prototype.destroy = function () {\n        this.emitBOM = undefined;\n        this.encodingType = undefined;\n    };\n    return Encoding;\n}());\nexport { Encoding };\n/**\n * To check the object is null or undefined and throw error if it is null or undefined\n * @param {Object} value - object to check is null or undefined\n * @return {boolean}\n * @throws {ArgumentException} - if the value is null or undefined\n * @private\n */\nexport function validateNullOrUndefined(value, message) {\n    if (value === null || value === undefined) {\n        throw new Error('ArgumentException: ' + message + ' cannot be null or undefined');\n    }\n}\n","import { Encoding, validateNullOrUndefined } from './encoding';\nimport { Save } from './save';\n/**\n * StreamWriter class contains the implementation for writing characters to a file in a particular encoding\n * ```typescript\n * let writer = new StreamWriter();\n * writer.write('Hello World');\n * writer.save('Sample.txt');\n * writer.dispose();\n * ```\n */\nvar StreamWriter = /** @class */ (function () {\n    /**\n     * Initializes a new instance of the StreamWriter class by using the specified encoding.\n     * @param  {Encoding} encoding?- The character encoding to use.\n     */\n    function StreamWriter(encoding) {\n        this.bufferBlob = new Blob(['']);\n        this.bufferText = '';\n        this.init(encoding);\n        Save.isMicrosoftBrowser = !(!navigator.msSaveBlob);\n    }\n    Object.defineProperty(StreamWriter.prototype, \"buffer\", {\n        /**\n         * Gets the content written to the StreamWriter as Blob.\n         * @returns Blob\n         */\n        get: function () {\n            this.flush();\n            return this.bufferBlob;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StreamWriter.prototype, \"encoding\", {\n        /**\n         * Gets the encoding.\n         * @returns Encoding\n         */\n        get: function () {\n            return this.enc;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    StreamWriter.prototype.init = function (encoding) {\n        if (encoding === null || encoding === undefined) {\n            this.enc = new Encoding(false);\n            this.enc.type = 'Utf8';\n        }\n        else {\n            this.enc = encoding;\n            this.setBomByte();\n        }\n    };\n    /**\n     * Private method to set Byte Order Mark(BOM) value based on EncodingType\n     */\n    StreamWriter.prototype.setBomByte = function () {\n        if (this.encoding.includeBom) {\n            switch (this.encoding.type) {\n                case 'Unicode':\n                    var arrayUnicode = new ArrayBuffer(2);\n                    var uint8 = new Uint8Array(arrayUnicode);\n                    uint8[0] = 255;\n                    uint8[1] = 254;\n                    this.bufferBlob = new Blob([arrayUnicode]);\n                    break;\n                case 'Utf8':\n                    var arrayUtf8 = new ArrayBuffer(3);\n                    var utf8 = new Uint8Array(arrayUtf8);\n                    utf8[0] = 239;\n                    utf8[1] = 187;\n                    utf8[2] = 191;\n                    this.bufferBlob = new Blob([arrayUtf8]);\n                    break;\n                default:\n                    this.bufferBlob = new Blob(['']);\n                    break;\n            }\n        }\n    };\n    /**\n     * Saves the file with specified name and sends the file to client browser\n     * @param  {string} fileName - The file name to save\n     * @returns {void}\n     */\n    StreamWriter.prototype.save = function (fileName) {\n        if (this.bufferText !== '') {\n            this.flush();\n        }\n        Save.save(fileName, this.buffer);\n    };\n    /**\n     * Writes the specified string.\n     * @param  {string} value - The string to write. If value is null or undefined, nothing is written.\n     * @returns {void}\n     */\n    StreamWriter.prototype.write = function (value) {\n        if (this.encoding === undefined) {\n            throw new Error('Object Disposed Exception: current writer is disposed');\n        }\n        validateNullOrUndefined(value, 'string');\n        this.bufferText += value;\n        if (this.bufferText.length >= 10240) {\n            this.flush();\n        }\n    };\n    StreamWriter.prototype.flush = function () {\n        if (this.bufferText === undefined || this.bufferText === null || this.bufferText.length === 0) {\n            return;\n        }\n        var bufferArray = this.encoding.getBytes(this.bufferText, 0, this.bufferText.length);\n        this.bufferText = '';\n        this.bufferBlob = new Blob([this.bufferBlob, bufferArray]);\n    };\n    /**\n     * Writes the specified string followed by a line terminator\n     * @param  {string} value - The string to write. If value is null or undefined, nothing is written\n     * @returns {void}\n     */\n    StreamWriter.prototype.writeLine = function (value) {\n        if (this.encoding === undefined) {\n            throw new Error('Object Disposed Exception: current writer is disposed');\n        }\n        validateNullOrUndefined(value, 'string');\n        this.bufferText = this.bufferText + value + '\\r\\n';\n        if (this.bufferText.length >= 10240) {\n            this.flush();\n        }\n    };\n    /**\n     * Releases the resources used by the StreamWriter\n     * @returns {void}\n     */\n    StreamWriter.prototype.destroy = function () {\n        this.bufferBlob = undefined;\n        this.bufferText = undefined;\n        if (this.enc instanceof Encoding) {\n            this.enc.destroy();\n        }\n        this.enc = undefined;\n    };\n    return StreamWriter;\n}());\nexport { StreamWriter };\n"],"names":["Save","save","fileName","buffer","Error","extension","substring","lastIndexOf","length","mimeType","this","getMimeType","Blob","type","isMicrosoftBrowser","navigator","msSaveBlob","downloadLink","document","createElementNS","saveInternal","hasDownloadAttribute","dataUrl_1","reader_1","download","window","URL","createObjectURL","href","event_1","createEvent","initEvent","dispatchEvent","setTimeout","revokeObjectURL","undefined","url","open","location","FileReader","onloadend","result","readAsDataURL","Object","defineProperty","XmlWriter","prototype","get","flush","bufferBlob","enumerable","configurable","writeProcessingInstruction","name","text","checkName","currentState","writeStartDocument","writeProcessingInstructionInternal","standalone","rawText","writeEndDocument","elementStack","writeEndElement","writeStartElement","prefix","localName","namespace","startElementContent","lookupPrefix","lookupNamespace","writeStartElementInternal","top","writeEndElementInternal","namespaceStack","splice","previousTop","bufferText","writeElementString","value","writeString","writeAttributeString","writeStartAttribute","writeStringInternal","writeEndAttribute","writeInternal","writeRaw","isRawString","destroy","i","contentPos","replace","writeStartAttributePrefixAndNameSpace","writeStartAttributeSpecialAttribute","skipPushAndWrite","pushNamespaceExplicit","pushNamespaceImplicit","push","XmlElement","set","attributeStack","writeStartAttributeInternal","namespaceName","writeNamespaceDeclaration","namespaceUri","writeStartNamespaceDeclaration","inAttributeValue","start","kind","addNamespace","ns","Namespace","lookupNamespaceIndex","existingNsIndex","addAttribute","XmlAttribute","isDuplicate","test","Encoding","emitBOM","encodingType","initBOM","includeBom","getByteCount","chars","validateNullOrUndefined","utf8Len","charCodeAt","getByteCountInternal","codePoint","isHighSurrogate","codeUnit","toCodepoint","highCodeUnit","lowCodeUnit","charIndex","charCount","byteCount","isUtf8","high","low","charCode","getBytes","s","RangeError","ArrayBuffer","getBytesOfUtf8Encoding","getBytesOfUnicodeEncoding","getBytesOfAnsiEncoding","getString","bytes","index","count","byteLength","out","byteCal","Uint8Array","getStringOfUtf8Encoding","byteUnicode","Uint16Array","getStringofUnicodeEncoding","j","c","String","fromCharCode","bufview","k","charcode","uint","uint16","byteUni","byte16","apply","message","StreamWriter","enc","init","encoding","setBomByte","arrayUnicode","uint8","arrayUtf8","utf8","write","bufferArray","writeLine"],"mappings":"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"}