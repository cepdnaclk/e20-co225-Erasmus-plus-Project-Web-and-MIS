import { PointF, PdfColor, PdfPen, PdfSolidBrush, PdfStandardFont, PdfFontFamily, PdfStringFormat, PdfTextAlignment, PdfDashStyle, PdfBrushes } from '@syncfusion/ej2-pdf-export';
import { pixelToPoint } from '../base/utils';
import { isNullOrUndefined } from '@syncfusion/ej2-base';
var EventMarker = /** @class */ (function () {
    function EventMarker(parent) {
        this.parent = parent;
    }
    EventMarker.prototype.drawEventMarker = function (page, startPoint, cumulativeWidth, detail, eventMarker, cumulativeHeight) {
        var taskGraphics = page.graphics;
        var pageSize = page.getClientSize();
        var font = new PdfStandardFont(PdfFontFamily.Helvetica, 10);
        if (!isNullOrUndefined(this.parent.pdfExportModule['helper']['exportProps'].ganttStyle) &&
            this.parent.pdfExportModule['helper']['exportProps'].ganttStyle.font) {
            font = this.parent.pdfExportModule['helper']['exportProps'].ganttStyle.font;
        }
        /* eslint-disable-next-line */
        var strSize;
        if (!isNullOrUndefined(eventMarker.label)) {
            strSize = font.measureString(eventMarker.label);
        }
        var triangle = 8;
        var eventLine = new PdfPen(new PdfColor(0, 0, 0));
        eventLine.dashStyle = PdfDashStyle.Dash;
        if (detail.startDate <= eventMarker.date && eventMarker.date <= detail.endDate) {
            var enventFormat = new PdfStringFormat();
            enventFormat.alignment = PdfTextAlignment.Center;
            var eventBrush = new PdfSolidBrush(new PdfColor(253, 191, 100));
            var left = this.parent.dataOperation.getTaskLeft(this.parent.dateValidationModule.getDateFromFormat(eventMarker.date, true), false, true);
            var diff = 10;
            if (this.parent.pdfExportModule.gantt.taskbar.isAutoFit()) {
                taskGraphics.drawLine(eventLine, new PointF(startPoint.x + (left - cumulativeWidth) + diff, cumulativeHeight), new PointF(startPoint.x + (left - cumulativeWidth) + diff, pageSize.height));
                if (!isNullOrUndefined(eventMarker.label) && eventMarker.label.length > 0) {
                    taskGraphics.save();
                    taskGraphics.translateTransform(startPoint.x + (left - cumulativeWidth) + 7 + diff, cumulativeHeight + pixelToPoint(50) + strSize.height / 2);
                    taskGraphics.rotateTransform(45);
                    taskGraphics.drawRectangle(null, eventBrush, 0, 0, triangle, triangle);
                    taskGraphics.restore();
                    taskGraphics.drawRectangle(null, eventBrush, startPoint.x + (left - cumulativeWidth) + 7 + diff, cumulativeHeight + pixelToPoint(50), strSize.width + 10, strSize.height * 2);
                    taskGraphics.drawString(eventMarker.label, font, null, PdfBrushes.Black, startPoint.x +
                        (left - cumulativeWidth) + 12 + diff, cumulativeHeight + pixelToPoint(50) + pixelToPoint(strSize.height / 2), strSize.width, strSize.height, enventFormat);
                }
            }
            else {
                taskGraphics.drawLine(eventLine, new PointF(startPoint.x + pixelToPoint(left - cumulativeWidth) + diff, cumulativeHeight), new PointF(startPoint.x + pixelToPoint(left - cumulativeWidth) + diff, pageSize.height));
                if (!isNullOrUndefined(eventMarker.label) && eventMarker.label.length > 0) {
                    taskGraphics.save();
                    taskGraphics.translateTransform(startPoint.x + pixelToPoint(left - cumulativeWidth) + 7 + diff, cumulativeHeight + pixelToPoint(50) + strSize.height / 2);
                    taskGraphics.rotateTransform(45);
                    taskGraphics.drawRectangle(null, eventBrush, 0, 0, triangle, triangle);
                    taskGraphics.restore();
                    taskGraphics.drawRectangle(null, eventBrush, startPoint.x + pixelToPoint(left - cumulativeWidth) + 7 + diff, cumulativeHeight + pixelToPoint(50), strSize.width + 10, strSize.height * 2);
                    taskGraphics.drawString(eventMarker.label, font, null, PdfBrushes.Black, startPoint.x + pixelToPoint(left - cumulativeWidth) + 12 + diff, cumulativeHeight + pixelToPoint(50) + pixelToPoint(strSize.height / 2), strSize.width, strSize.height, enventFormat);
                }
            }
        }
    };
    return EventMarker;
}());
export { EventMarker };
